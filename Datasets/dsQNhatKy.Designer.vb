'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsQNhatKy"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsQNhatKy
    Inherits Global.System.Data.DataSet
    
    Private tableQNhatKy As QNhatKyDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("QNhatKy")) Is Nothing) Then
                MyBase.Tables.Add(New QNhatKyDataTable(ds.Tables("QNhatKy")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QNhatKy() As QNhatKyDataTable
        Get
            Return Me.tableQNhatKy
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsQNhatKy = CType(MyBase.Clone,dsQNhatKy)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("QNhatKy")) Is Nothing) Then
                MyBase.Tables.Add(New QNhatKyDataTable(ds.Tables("QNhatKy")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableQNhatKy = CType(MyBase.Tables("QNhatKy"),QNhatKyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQNhatKy) Is Nothing) Then
                Me.tableQNhatKy.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsQNhatKy"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsQNhatKy.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableQNhatKy = New QNhatKyDataTable
        MyBase.Tables.Add(Me.tableQNhatKy)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQNhatKy() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsQNhatKy = New dsQNhatKy
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub QNhatKyRowChangeEventHandler(ByVal sender As Object, ByVal e As QNhatKyRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QNhatKyDataTable
        Inherits Global.System.Data.TypedTableBase(Of QNhatKyRow)
        
        Private columnKyHieu As Global.System.Data.DataColumn
        
        Private columnKyHieuMau As Global.System.Data.DataColumn
        
        Private columnSoHD As Global.System.Data.DataColumn
        
        Private columnNgayPH As Global.System.Data.DataColumn
        
        Private columnMatHang As Global.System.Data.DataColumn
        
        Private columnSoLuong As Global.System.Data.DataColumn
        
        Private columnThanhTien As Global.System.Data.DataColumn
        
        Private columnTen As Global.System.Data.DataColumn
        
        Private columnMST As Global.System.Data.DataColumn
        
        Private columnSoHieu As Global.System.Data.DataColumn
        
        Private columnSoPS As Global.System.Data.DataColumn
        
        Private columnDiaChi As Global.System.Data.DataColumn
        
        Private columnTyLe As Global.System.Data.DataColumn
        
        Private columnHTTT As Global.System.Data.DataColumn
        
        Private columnMauSo As Global.System.Data.DataColumn
        
        Private columnMaCT As Global.System.Data.DataColumn
        
        Private columnKCT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QNhatKy"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KyHieuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKyHieu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KyHieuMauColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKyHieuMau
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SoHDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoHD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NgayPHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNgayPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MatHangColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMatHang
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SoLuongColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoLuong
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThanhTienColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThanhTien
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SoHieuColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoHieu
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SoPSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSoPS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaChiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiaChi
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TyLeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTyLe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HTTTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHTTT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MauSoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMauSo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QNhatKyRow
            Get
                Return CType(Me.Rows(index),QNhatKyRow)
            End Get
        End Property
        
        Public Event QNhatKyRowChanging As QNhatKyRowChangeEventHandler
        
        Public Event QNhatKyRowChanged As QNhatKyRowChangeEventHandler
        
        Public Event QNhatKyRowDeleting As QNhatKyRowChangeEventHandler
        
        Public Event QNhatKyRowDeleted As QNhatKyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQNhatKyRow(ByVal row As QNhatKyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQNhatKyRow( _
                    ByVal KyHieu As String,  _
                    ByVal KyHieuMau As String,  _
                    ByVal SoHD As String,  _
                    ByVal NgayPH As Date,  _
                    ByVal MatHang As String,  _
                    ByVal SoLuong As Double,  _
                    ByVal ThanhTien As Double,  _
                    ByVal Ten As String,  _
                    ByVal MST As String,  _
                    ByVal SoHieu As String,  _
                    ByVal SoPS As Double,  _
                    ByVal DiaChi As String,  _
                    ByVal TyLe As Double,  _
                    ByVal HTTT As String,  _
                    ByVal MauSo As String,  _
                    ByVal MaCT As Integer,  _
                    ByVal KCT As Integer) As QNhatKyRow
            Dim rowQNhatKyRow As QNhatKyRow = CType(Me.NewRow,QNhatKyRow)
            Dim columnValuesArray() As Object = New Object() {KyHieu, KyHieuMau, SoHD, NgayPH, MatHang, SoLuong, ThanhTien, Ten, MST, SoHieu, SoPS, DiaChi, TyLe, HTTT, MauSo, MaCT, KCT}
            rowQNhatKyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQNhatKyRow)
            Return rowQNhatKyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QNhatKyDataTable = CType(MyBase.Clone,QNhatKyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QNhatKyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnKyHieu = MyBase.Columns("KyHieu")
            Me.columnKyHieuMau = MyBase.Columns("KyHieuMau")
            Me.columnSoHD = MyBase.Columns("SoHD")
            Me.columnNgayPH = MyBase.Columns("NgayPH")
            Me.columnMatHang = MyBase.Columns("MatHang")
            Me.columnSoLuong = MyBase.Columns("SoLuong")
            Me.columnThanhTien = MyBase.Columns("ThanhTien")
            Me.columnTen = MyBase.Columns("Ten")
            Me.columnMST = MyBase.Columns("MST")
            Me.columnSoHieu = MyBase.Columns("SoHieu")
            Me.columnSoPS = MyBase.Columns("SoPS")
            Me.columnDiaChi = MyBase.Columns("DiaChi")
            Me.columnTyLe = MyBase.Columns("TyLe")
            Me.columnHTTT = MyBase.Columns("HTTT")
            Me.columnMauSo = MyBase.Columns("MauSo")
            Me.columnMaCT = MyBase.Columns("MaCT")
            Me.columnKCT = MyBase.Columns("KCT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnKyHieu = New Global.System.Data.DataColumn("KyHieu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKyHieu)
            Me.columnKyHieuMau = New Global.System.Data.DataColumn("KyHieuMau", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKyHieuMau)
            Me.columnSoHD = New Global.System.Data.DataColumn("SoHD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoHD)
            Me.columnNgayPH = New Global.System.Data.DataColumn("NgayPH", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNgayPH)
            Me.columnMatHang = New Global.System.Data.DataColumn("MatHang", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMatHang)
            Me.columnSoLuong = New Global.System.Data.DataColumn("SoLuong", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoLuong)
            Me.columnThanhTien = New Global.System.Data.DataColumn("ThanhTien", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThanhTien)
            Me.columnTen = New Global.System.Data.DataColumn("Ten", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTen)
            Me.columnMST = New Global.System.Data.DataColumn("MST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMST)
            Me.columnSoHieu = New Global.System.Data.DataColumn("SoHieu", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoHieu)
            Me.columnSoPS = New Global.System.Data.DataColumn("SoPS", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSoPS)
            Me.columnDiaChi = New Global.System.Data.DataColumn("DiaChi", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaChi)
            Me.columnTyLe = New Global.System.Data.DataColumn("TyLe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTyLe)
            Me.columnHTTT = New Global.System.Data.DataColumn("HTTT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHTTT)
            Me.columnMauSo = New Global.System.Data.DataColumn("MauSo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMauSo)
            Me.columnMaCT = New Global.System.Data.DataColumn("MaCT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaCT)
            Me.columnKCT = New Global.System.Data.DataColumn("KCT", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKCT)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQNhatKyRow() As QNhatKyRow
            Return CType(Me.NewRow,QNhatKyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QNhatKyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QNhatKyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QNhatKyRowChangedEvent) Is Nothing) Then
                RaiseEvent QNhatKyRowChanged(Me, New QNhatKyRowChangeEvent(CType(e.Row,QNhatKyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QNhatKyRowChangingEvent) Is Nothing) Then
                RaiseEvent QNhatKyRowChanging(Me, New QNhatKyRowChangeEvent(CType(e.Row,QNhatKyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QNhatKyRowDeletedEvent) Is Nothing) Then
                RaiseEvent QNhatKyRowDeleted(Me, New QNhatKyRowChangeEvent(CType(e.Row,QNhatKyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QNhatKyRowDeletingEvent) Is Nothing) Then
                RaiseEvent QNhatKyRowDeleting(Me, New QNhatKyRowChangeEvent(CType(e.Row,QNhatKyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQNhatKyRow(ByVal row As QNhatKyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsQNhatKy = New dsQNhatKy
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QNhatKyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QNhatKyRow
        Inherits Global.System.Data.DataRow
        
        Private tableQNhatKy As QNhatKyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQNhatKy = CType(Me.Table,QNhatKyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KyHieu() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.KyHieuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KyHieu' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.KyHieuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KyHieuMau() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.KyHieuMauColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KyHieuMau' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.KyHieuMauColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SoHD() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.SoHDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SoHD' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.SoHDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NgayPH() As Date
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.NgayPHColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NgayPH' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.NgayPHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MatHang() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.MatHangColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MatHang' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.MatHangColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SoLuong() As Double
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.SoLuongColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SoLuong' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.SoLuongColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ThanhTien() As Double
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.ThanhTienColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ThanhTien' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.ThanhTienColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ten() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.TenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ten' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.TenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MST() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.MSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MST' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.MSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SoHieu() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.SoHieuColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SoHieu' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.SoHieuColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SoPS() As Double
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.SoPSColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SoPS' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.SoPSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaChi() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.DiaChiColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiaChi' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.DiaChiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TyLe() As Double
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.TyLeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TyLe' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.TyLeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HTTT() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.HTTTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HTTT' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.HTTTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MauSo() As String
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.MauSoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MauSo' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.MauSoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaCT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.MaCTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaCT' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.MaCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KCT() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableQNhatKy.KCTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KCT' in table 'QNhatKy' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQNhatKy.KCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKyHieuNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.KyHieuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKyHieuNull()
            Me(Me.tableQNhatKy.KyHieuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKyHieuMauNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.KyHieuMauColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKyHieuMauNull()
            Me(Me.tableQNhatKy.KyHieuMauColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSoHDNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.SoHDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSoHDNull()
            Me(Me.tableQNhatKy.SoHDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNgayPHNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.NgayPHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNgayPHNull()
            Me(Me.tableQNhatKy.NgayPHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMatHangNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.MatHangColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMatHangNull()
            Me(Me.tableQNhatKy.MatHangColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSoLuongNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.SoLuongColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSoLuongNull()
            Me(Me.tableQNhatKy.SoLuongColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsThanhTienNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.ThanhTienColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetThanhTienNull()
            Me(Me.tableQNhatKy.ThanhTienColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTenNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.TenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTenNull()
            Me(Me.tableQNhatKy.TenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMSTNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.MSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMSTNull()
            Me(Me.tableQNhatKy.MSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSoHieuNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.SoHieuColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSoHieuNull()
            Me(Me.tableQNhatKy.SoHieuColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSoPSNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.SoPSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSoPSNull()
            Me(Me.tableQNhatKy.SoPSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiaChiNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.DiaChiColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiaChiNull()
            Me(Me.tableQNhatKy.DiaChiColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTyLeNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.TyLeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTyLeNull()
            Me(Me.tableQNhatKy.TyLeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHTTTNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.HTTTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHTTTNull()
            Me(Me.tableQNhatKy.HTTTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMauSoNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.MauSoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMauSoNull()
            Me(Me.tableQNhatKy.MauSoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaCTNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.MaCTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaCTNull()
            Me(Me.tableQNhatKy.MaCTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKCTNull() As Boolean
            Return Me.IsNull(Me.tableQNhatKy.KCTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKCTNull()
            Me(Me.tableQNhatKy.KCTColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QNhatKyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QNhatKyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QNhatKyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QNhatKyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
